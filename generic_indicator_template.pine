// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© jhabermas

//@version=4
study("Indicator Template", overlay=false)


//==============================
//
// Notes
//
//==============================

// A template for large pine script indicators.


//==============================
//
// Constants
//
//==============================

// Variables
//-----------------------------------------------------

var int c_upper_band = 42

// Arrays
//-----------------------------------------------------

var color[] grayscale_10 = array.new_color()

if barstate.isfirst
	array.push(grayscale_10, #ffffff)
	array.push(grayscale_10, #e6e6e6)
	array.push(grayscale_10, #cccccc)
	array.push(grayscale_10, #b2b2b2)
	array.push(grayscale_10, #999999)
	array.push(grayscale_10, #808080)
	array.push(grayscale_10, #666666)
	array.push(grayscale_10, #4d4d4d)
	array.push(grayscale_10, #333333)
	array.push(grayscale_10, #191919)

f_grayscale_10(_idx) => array.get(id=grayscale_10, index=_idx)


//==============================
//
// Inputs
//
//==============================
i_slow_period = input(title="Slow Period", type=input.integer, defval=200, minval=3, maxval=300)
i_fast_period = input(title="Fast Period", type=input.integer, defval=50, minval=3, maxval=300)

//==============================
//
// Globals
//
//==============================

var float g_f = 1.0 // Example of using persistent variables
f_htf_multi(tf) => tf == "15" ? 16 : tf == "60" ? 24 : tf == "240" ? 8 : tf == "D" ? 7 : tf == "W" ? 4 : 16
f_htf_timeframe(tf) => tf == "1" ? "15" : tf == "3" ? "30" : tf == "5" ? "60" : tf == "15" ? "240" : tf == "240" ? "D" : tf == "D" ? "W" : tf == "W" ? "M" : "240"

htf_multi = f_htf_multi(timeframe.period)
htf_tf = f_htf_timeframe(timeframe.period)
htf_series = security(syminfo.tickerid, htf_tf, close)

line_40 = hline(40, color=color.new(color.gray, 75))
line_0 = hline(0, color=color.new(color.gray, 75))
line_040 = hline(-40, color=color.new(color.gray, 75))

//==============================
//
// Functions
//
//==============================
f_angle(_src) =>
    rad2degree=180/3.14159265359
    ang=rad2degree*atan((_src[0] - _src[1])/atr(14))

//==============================
//
// Calculations
//
//==============================


//==============================
//
// Signals
//
//==============================


//==============================
//
// Plots
//
//==============================


//==============================
//
// Labels
//
//==============================
